{
  "hash": "f1c4dd2f08cd10d8847a2a6485293fc5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Gestion de risques de portefeuille\nauthor : Cheryl Kouadio\njupyter: python3\ndate: \"2025-01-27\"\n---\n\n\n\n\n\n\n\nPour gérer les risques, on procède en trois étapes :\n1. Identification : Nous avons un portefeuille d'action, donc le risque auquel on fait face est le risque de marché action.\n\n2. Metrique de risque : Volatilité ex-ante, Value at Risk ex-ante, Tracking error ex-ante (i.e. par anticipation, on se base sur l'état du portefeuille à l'instant t et non aux instants passés - ex-post)\n\n3. Encadrement\n\nDans notre cas, on va constituer le portefeuille avec 10 actifs du CAC 40 de notre choix et leur allouer des poids aléatoires :\n\n::: {#56c8551a .cell execution_count=1}\n``` {.python .cell-code}\n# ! pip install yfinance\nfrom datetime import datetime, timedelta\nimport yfinance as yf \nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/cherylkouadio/Documents/Repositories/personal-website/.venv/lib/python3.9/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020\n  warnings.warn(\n```\n:::\n:::\n\n\n::: {#2cdbbec2 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_data(start_date, end_date, index_ticker, tickers):\n    \"\"\"\n    Extraction de données de cours d'actions\n    Args:\n        start_date (str): Date de début au format 'YYYY-MM-DD'.\n        end_date (str): Date de fin au format 'YYYY-MM-DD'.\n\n    Returns:\n        dict: Contient les prix historiques des indices\n    \"\"\"\n    # Extraction des prix historiques des composants\n    data = yf.download(tickers, start=start_date, end=end_date, auto_adjust =True)['Close']\n\n    # Extraction des prix historiques de l'indice CAC 40\n    index = yf.download(index_ticker, start=start_date, end=end_date, auto_adjust =True)['Close']\n\n    return {\n        \"portfolio_data\": data,\n        \"benchmark_data\": index,\n    }\n```\n:::\n\n\n::: {#038f3105 .cell execution_count=3}\n``` {.python .cell-code}\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=2*365)\n\nselected_assets = {\n    \"SAN.PA\" : \"Sanofi\",\n    \"GLE.PA\" : \"Société générale\",\n    \"HO.PA\" : \"Thales\",\n    \"ENGI.PA\" : \"Engie\",\n    \"CAP.PA\" : \"Capgemini\",\n    \"CA.PA\" : \"Carrefour\",\n    \"ORA.PA\" : \"Orange\",\n    \"AC.PA\" : \"Accor\",\n    \"OR.PA\" : \"L'Oreal\",\n    \"ACA.PA\" : \"Crédit agricole\"\n}\n\nindex = \"^FCHI\"\n\nassets_ticker  = list(selected_assets.keys())\n\ndata = get_data(start_date,end_date, index, assets_ticker)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[                       0%                       ]\r[**********            20%                       ]  2 of 10 completed\r[**********            20%                       ]  2 of 10 completed\r[**********            20%                       ]  2 of 10 completed\r[**********            20%                       ]  2 of 10 completed\r[**********************60%****                   ]  6 of 10 completed\r[**********************70%*********              ]  7 of 10 completed\r[**********************80%*************          ]  8 of 10 completed\r[**********************90%******************     ]  9 of 10 completed\r[*********************100%***********************]  10 of 10 completed\n\r[*********************100%***********************]  1 of 1 completed\n```\n:::\n:::\n\n\n::: {#856bb55e .cell execution_count=4}\n``` {.python .cell-code}\nportfolio_data = data[\"portfolio_data\"]\nportfolio_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Ticker</th>\n      <th>AC.PA</th>\n      <th>ACA.PA</th>\n      <th>CA.PA</th>\n      <th>CAP.PA</th>\n      <th>ENGI.PA</th>\n      <th>GLE.PA</th>\n      <th>HO.PA</th>\n      <th>OR.PA</th>\n      <th>ORA.PA</th>\n      <th>SAN.PA</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-03-24</th>\n      <td>26.967457</td>\n      <td>8.468246</td>\n      <td>16.023325</td>\n      <td>159.654633</td>\n      <td>11.256000</td>\n      <td>17.863811</td>\n      <td>129.346130</td>\n      <td>381.158112</td>\n      <td>9.345109</td>\n      <td>89.875389</td>\n    </tr>\n    <tr>\n      <th>2023-03-27</th>\n      <td>27.245968</td>\n      <td>8.544061</td>\n      <td>16.174488</td>\n      <td>158.161179</td>\n      <td>11.479892</td>\n      <td>17.919468</td>\n      <td>130.734375</td>\n      <td>383.647827</td>\n      <td>9.539397</td>\n      <td>91.115692</td>\n    </tr>\n    <tr>\n      <th>2023-03-28</th>\n      <td>27.053892</td>\n      <td>8.578135</td>\n      <td>16.412687</td>\n      <td>156.667740</td>\n      <td>11.547888</td>\n      <td>17.727364</td>\n      <td>130.925842</td>\n      <td>381.206024</td>\n      <td>9.499140</td>\n      <td>92.559624</td>\n    </tr>\n    <tr>\n      <th>2023-03-29</th>\n      <td>27.668535</td>\n      <td>8.733172</td>\n      <td>16.495138</td>\n      <td>159.606445</td>\n      <td>11.786708</td>\n      <td>18.070276</td>\n      <td>131.500290</td>\n      <td>385.802307</td>\n      <td>9.451881</td>\n      <td>93.485222</td>\n    </tr>\n    <tr>\n      <th>2023-03-30</th>\n      <td>28.571291</td>\n      <td>8.833690</td>\n      <td>16.728754</td>\n      <td>164.279510</td>\n      <td>12.071963</td>\n      <td>18.649279</td>\n      <td>130.686478</td>\n      <td>388.339874</td>\n      <td>9.469383</td>\n      <td>92.032036</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#0563e80e .cell execution_count=5}\n``` {.python .cell-code}\nbenchmark_data = data[\"benchmark_data\"]\nbenchmark_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Ticker</th>\n      <th>^FCHI</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-03-24</th>\n      <td>7015.100098</td>\n    </tr>\n    <tr>\n      <th>2023-03-27</th>\n      <td>7078.270020</td>\n    </tr>\n    <tr>\n      <th>2023-03-28</th>\n      <td>7088.339844</td>\n    </tr>\n    <tr>\n      <th>2023-03-29</th>\n      <td>7186.990234</td>\n    </tr>\n    <tr>\n      <th>2023-03-30</th>\n      <td>7263.370117</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6741fd8c .cell execution_count=6}\n``` {.python .cell-code}\n# On attribue des poids équitables pour chaque action\nweights_by_asset = {ticker: 1 / len(assets_ticker) for ticker in assets_ticker}\n```\n:::\n\n\nOn souhaite connaitre la valeur totale du actifs du portefeuille, i.e. l'asset under management(AUM) :\n\n\n$$\nAUM(T_n) = \\sum_{i=1}^{10} \\omega_i \\times P_i(T_n)\n$$\n\n::: {#095b0a33 .cell execution_count=7}\n``` {.python .cell-code}\naum_series = portfolio_data.apply(lambda row: sum(weights_by_asset[ticker] * row[ticker] for ticker in weights_by_asset), axis=1)\naum_series\n\nAUM = pd.DataFrame(aum_series, columns=[\"AUM\"])\n```\n:::\n\n\n::: {#a24f9436 .cell execution_count=8}\n``` {.python .cell-code}\nAUM.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AUM</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-03-24</th>\n      <td>84.995821</td>\n    </tr>\n    <tr>\n      <th>2023-03-27</th>\n      <td>85.456235</td>\n    </tr>\n    <tr>\n      <th>2023-03-28</th>\n      <td>85.217834</td>\n    </tr>\n    <tr>\n      <th>2023-03-29</th>\n      <td>86.259998</td>\n    </tr>\n    <tr>\n      <th>2023-03-30</th>\n      <td>86.966226</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#ef7c8e94 .cell execution_count=9}\n``` {.python .cell-code}\n# Evolution de la valeur totale du portefeuille\n\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 4))\nplt.plot(AUM, label=\"AUM\")\nplt.title(\"Evolution de l'actif sous gestion\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Valeur\")\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](mesures_rsq_files/figure-ipynb/cell-10-output-1.png){}\n:::\n:::\n\n\n::: {#6102ef16 .cell execution_count=10}\n``` {.python .cell-code}\n# On s'interesse aux variations/rendements de l'AUM\n\nAUM[\"Variation\"] = AUM[\"AUM\"].pct_change()\nAUM[\"Variation\"].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nDate\n2023-03-24         NaN\n2023-03-27    0.005417\n2023-03-28   -0.002790\n2023-03-29    0.012229\n2023-03-30    0.008187\nName: Variation, dtype: float64\n```\n:::\n:::\n\n\n### Estimation de la volatilité\n\nPour estimer la volatilité du portefeuille, on peut calculer l'écart-type des variations de l'AUM.\nOn fait le choix de calculer une volatilité ex-ante en se basant sur les variation historiques des prix des actifs avec une profondeur historique de 2 ans. Vu qu'on a une volatilité quotidienne, on va l'annualiser en multipliant par $\\sqrt{252}$.\n\nEn général, sur le marché action, la volatilité quotidienne est environ de 1% et la volatilité annuelle est entre 10% et 20%.\n\n::: {#9cee35c9 .cell execution_count=11}\n``` {.python .cell-code}\n# Calcul de la volatilité du portefeuille\nvolatility_portfolio = np.std(AUM[\"Variation\"])\nannualized_volatility_portfolio = volatility_portfolio * np.sqrt(252)\nprint(f\"Volatilité de la performance quotidienne : {volatility_portfolio : .2%}\")\nprint(f\"Volatilité de la performance annuelle : {annualized_volatility_portfolio : .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVolatilité de la performance quotidienne :  0.90%\nVolatilité de la performance annuelle :  14.30%\n```\n:::\n:::\n\n\n::: {#ee0b29db .cell execution_count=12}\n``` {.python .cell-code}\n# Calcul de la volatilité de l'indice CAC 40\n\nbenchmark_data[\"Variation\"] = benchmark_data[\"^FCHI\"].pct_change()\nvolatility_benchmark = np.std(benchmark_data[\"Variation\"])\nannualized_volatility_benchmark = volatility_benchmark * np.sqrt(252)\n\nprint(f\"Volatilité de l'indice CAC 40 : {volatility_benchmark : .2%}\")\nprint(f\"Volatilité de l'indice CAC 40 annuelle : {annualized_volatility_benchmark : .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVolatilité de l'indice CAC 40 :  0.81%\nVolatilité de l'indice CAC 40 annuelle :  12.79%\n```\n:::\n:::\n\n\nOn retrouve sur à peu près la même volatilité du portefeuille et celle du CAC 40. Il y a donc une certaine homogénéité.\n\n### Estimation de la tracking error/erreur de suivi\n\nLa tracking error est une mesure de l'écart entre la performance d'un portefeuille et celle de son indice de référence. Elle est calculée comme la volatilité de la différence entre les rendements du portefeuille et de l'indice de référence :\n\n$$\nTE = \\sqrt{Var(R_p - R_b)}\n$$\n\nLa tracking error mesure l'incercitude du portefeuille par rapport à l'indice de référence, c'est une mesure relative. Plus la tracking error est élevée, plus le portefeuille est risqué. On ne souhaite sous ou sur-performer l'indice de référence. On souhaite suivre véritablement l'indice de référence.\n\nPour l'annualiser, on multiplie par $\\sqrt{252}$ en supposant que les performances quotidiennes sont indépendantes et donc un utilise l'additivité des variances.\n\n::: {#082ad734 .cell execution_count=13}\n``` {.python .cell-code}\nperformance_relative = AUM[\"Variation\"] - benchmark_data[\"Variation\"]\n\nplt.figure(figsize=(12, 4))\nplt.plot(performance_relative, label=\"Performance\")\nplt.title(\"Performance du portefeuille par rapport à l'indice CAC 40\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Performance\")\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](mesures_rsq_files/figure-ipynb/cell-14-output-1.png){}\n:::\n:::\n\n\n::: {#471feded .cell execution_count=14}\n``` {.python .cell-code}\n# Calcul de la tracking error\n\nTE = np.std(AUM[\"Variation\"] - benchmark_data[\"Variation\"]) \nprint(f\"Tracking error : {TE : .2%}\")\n\nTE_annualized = TE * np.sqrt(252)\nprint(f\"Tracking error annualisé : {TE_annualized : .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTracking error :  0.56%\nTracking error annualisé :  8.95%\n```\n:::\n:::\n\n\n### Estimation de la Value-at-Risk (VaR)\n\nLa VaR est une mesure de risque qui donne une estimation de la perte maximale que l'on peut subir avec un certain niveau de confiance $\\alpha$ sur un horizon de temps donné. Par exemple, une VaR à 5% sur 1 jour de 1000 euros signifie que 95% du temps, on ne perdra pas plus de 1000 euros sur un jour.\n\n$$P(\\text{Loss} < \\text{VaR}) = \\alpha.$$\n\nOn peut également raisonner en terme de gain, i.e. Profit and Loss (PnL).\n\n$$P(\\text{PnL} > - \\text{VaR}) = \\alpha.$$\n\nLa VaR peut se calculer suivant trois approches :\n1. **Approche historique** : On se base sur les rendements passés selon l'horizon fixé pour estimer la VaR, à l'aide d'un quantile empirique d'ordre $\\alpha$. Autrement, on peut se baser sur les rendements journaliers et utiliser la méthode de **rescaling**, i.e. $VaR = \\sigma \\times \\Phi^{-1}(\\alpha)$.\n2. **Approche paramétrique** : On suppose que les rendements suivent une loi normale.\n3. **Approche Monte Carlo** : On simule les rendements futurs.\n\n::: {#0565f0a5 .cell execution_count=15}\n``` {.python .cell-code}\n# VaR historique\nseuil = 99/100\n\nVaR_hist_portfolio = np.percentile(AUM[\"Variation\"].dropna(), 100*(1- seuil))\nprint(f\"VaR historique sur le portefeuille : {- VaR_hist_portfolio : .2%}\")\nprint(f\"VaR historique sur 20 jours sur le portefeuille : {-VaR_hist_portfolio*np.sqrt(20) : .2%}\")\n\nprint(\"\\n\",\"=*=\"*10,\"\\n\")\nVaR_hist_benchmark = np.percentile(benchmark_data[\"Variation\"].dropna(), 100*(1 - seuil))\nprint(f\"VaR historique sur l'indice CAC 40 : {-VaR_hist_benchmark : .2%}\")\nprint(f\"VaR historique sur 20 jours sur l'indice CAC 40 : {-VaR_hist_benchmark*np.sqrt(20) : .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVaR historique sur le portefeuille :  2.17%\nVaR historique sur 20 jours sur le portefeuille :  9.71%\n\n =*==*==*==*==*==*==*==*==*==*= \n\nVaR historique sur l'indice CAC 40 :  1.98%\nVaR historique sur 20 jours sur l'indice CAC 40 :  8.87%\n```\n:::\n:::\n\n\n::: {#3be2a79c .cell execution_count=16}\n``` {.python .cell-code}\n# VaR paramétrique\n# PnL ~ N(mu, sigma) ==> PnL = mu + sigma * Z, où Z ~ N(0,1)\n# P(PnL > -VaR) = alpha <=> P(mu + sigma * Z > -VaR) = alpha <=> P(Z < (-VaR - mu) / sigma) = 1 - alpha\n# Donc, -VaR = mu + sigma * quantile(1 - alpha), où quantile(1 - alpha) est le quantile de la loi normale standard\n\nfrom scipy.stats import norm\n\nmu = np.mean(AUM[\"Variation\"].dropna())\nprint(f\"mu sur le portefeuille : {mu : .2}\")\nsigma = np.std(AUM[\"Variation\"].dropna())\nprint(f\"sigma sur le portefeuille : {sigma : .2}\")\n\nVaR_param_portfolio  = -(mu + sigma * norm.ppf(1 - seuil))\n\nprint(f\"VaR paramétrique sur le portefeuille : {VaR_param_portfolio : .2%}\")\nprint(f\"VaR paramétrique sur 20 jours sur le portefeuille : {VaR_param_portfolio * np.sqrt(20): .2%}\")\n\nprint(\"\\n\",\"=*=\"*10,\"\\n\")\n\nmu = np.mean(benchmark_data[\"Variation\"].dropna())\nprint(f\"mu sur le benchmark: {mu : .2}\")\nsigma = np.std(benchmark_data[\"Variation\"].dropna())\nprint(f\"sigma sur le benchmark : {sigma : .2}\")\n\nVaR_param_benchmark  = -(mu + sigma * norm.ppf(1 - seuil))\n\nprint(f\"VaR paramétrique sur le portefeuille : {VaR_param_benchmark : .2%}\")\nprint(f\"VaR paramétrique sur 20 jours sur le portefeuille : {VaR_param_benchmark * np.sqrt(20): .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmu sur le portefeuille :  0.00034\nsigma sur le portefeuille :  0.009\nVaR paramétrique sur le portefeuille :  2.06%\nVaR paramétrique sur 20 jours sur le portefeuille :  9.22%\n\n =*==*==*==*==*==*==*==*==*==*= \n\nmu sur le benchmark:  0.0003\nsigma sur le benchmark :  0.0081\nVaR paramétrique sur le portefeuille :  1.84%\nVaR paramétrique sur 20 jours sur le portefeuille :  8.25%\n```\n:::\n:::\n\n\nLa VaR relative suit une philosophie proche du tracking error. Elle se calcule sur les écarts entre le portefeuille et le benchmark. Elle sert à mesurer de combien mon portefeuille sous-performe par rapport à l'indice de référence.\n\n::: {#cdd6754a .cell execution_count=17}\n``` {.python .cell-code}\nperformance_relative\n\n\nVaR_hist_relative = np.percentile(performance_relative.dropna(), 100*(1- seuil))\nprint(f\"VaR historique relative : {- VaR_hist_relative : .2%}\")\nprint(f\"VaR historique relative sur 20 jours : {-VaR_hist_relative*np.sqrt(20) : .2%}\")\n\nprint(\"\\n\",\"=*=\"*10,\"\\n\")\n\nmu = np.mean(performance_relative.dropna())\nprint(f\"mu des performances relatives: {mu : .2}\")\nsigma = np.std(performance_relative.dropna())\nprint(f\"sigma des performances relatives : {sigma : .2}\")\n\nVaR_param_relative  = -(mu + sigma * norm.ppf(1 - seuil))\n\nprint(f\"VaR paramétrique relative : {VaR_param_relative : .2%}\")\nprint(f\"VaR paramétrique relative sur 20 jours : {VaR_param_relative * np.sqrt(20): .2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVaR historique relative :  1.08%\nVaR historique relative sur 20 jours :  4.82%\n\n =*==*==*==*==*==*==*==*==*==*= \n\nmu des performances relatives:  4e-05\nsigma des performances relatives :  0.0056\nVaR paramétrique relative :  1.31%\nVaR paramétrique relative sur 20 jours :  5.85%\n```\n:::\n:::\n\n\n# Stress test\n\nLes stress test permettent de tester les performances du portefeuille dans des conditions extrêmes. Ils sont de deux natures :\n1. Stress test historique : On soumet le portefeuille à une période historique ou on estime avoir eu une condition extrême (Covid, Subprime crisis). On rejoue un scénario qui s'est déjà passé.\n\n2. Stress test hypothétique : On joue un scénario qui ne s'est jamais réalisé. Exemple, si les actions chutent de 40%, notre portefeuille d'action chute de 40%.\n\n*Note : **bp** = 0,01%*\n\n::: {#9e4304a5 .cell execution_count=18}\n``` {.python .cell-code}\n# Recuperons les prix des actifs le 19/02/2020 et le 18/03/2020\n# On va valoriser notre portefeuille à ces dates et calculer les performances\n# A ces dates, le CAC 40 a connu de fortes pertes pendant la COVID-19\n# data_1902 = get_data\n\nstart_date = pd.to_datetime(\"19-02-2020\", dayfirst=True)\nend_date = start_date + timedelta(days=1)\n\n\ndata_1902 = get_data(start_date,end_date, index, assets_ticker)\nportfolio_data_1902=data_1902[\"portfolio_data\"]\nbenchmark_data_1902=data_1902['benchmark_data']\n\nstart_date = pd.to_datetime(\"18-03-2020\", dayfirst=True)\nend_date = start_date + timedelta(days=1)\n\n\ndata_1803 = get_data(start_date,end_date, index, assets_ticker)\nportfolio_data_1803=data_1803[\"portfolio_data\"]\nbenchmark_data_1803=data_1803['benchmark_data']\n\n# Concaténer les données des deux dates pour le portefeuille et le benchmark\nportfolio_data_stress = pd.concat([portfolio_data_1902, portfolio_data_1803], ignore_index=False)\nbenchmark_data_stress = pd.concat([benchmark_data_1902, benchmark_data_1803], ignore_index=False)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[                       0%                       ]\r[**********            20%                       ]  2 of 10 completed\r[**************        30%                       ]  3 of 10 completed\r[**************        30%                       ]  3 of 10 completed\r[**********************50%                       ]  5 of 10 completed\r[**********************60%****                   ]  6 of 10 completed\r[**********************70%*********              ]  7 of 10 completed\r[**********************80%*************          ]  8 of 10 completed\r[**********************90%******************     ]  9 of 10 completed\r[*********************100%***********************]  10 of 10 completed\n\r[*********************100%***********************]  1 of 1 completed\n\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[**********************80%*************          ]  8 of 10 completed\r[**********************90%******************     ]  9 of 10 completed\r[*********************100%***********************]  10 of 10 completed\n\r[*********************100%***********************]  1 of 1 completed\n```\n:::\n:::\n\n\n::: {#c8df9549 .cell execution_count=19}\n``` {.python .cell-code}\n# Stress test covid sur le portefeuille\naum_series_stress = portfolio_data_stress.apply(lambda row: sum(weights_by_asset[ticker] * row[ticker] for ticker in weights_by_asset), axis=1)\n\nAUM_stress = pd.DataFrame(aum_series_stress, columns=[\"AUM\"])\nAUM_stress[\"Variation\"] = AUM_stress[\"AUM\"].pct_change()\n\nAUM_stress\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AUM</th>\n      <th>Variation</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-02-19</th>\n      <td>63.099166</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2020-03-18</th>\n      <td>43.756625</td>\n      <td>-0.306542</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c1661013 .cell execution_count=20}\n``` {.python .cell-code}\nbenchmark_data_stress[\"Variation\"]=benchmark_data_stress[\"^FCHI\"].pct_change()\nbenchmark_data_stress\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Ticker</th>\n      <th>^FCHI</th>\n      <th>Variation</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020-02-19</th>\n      <td>6111.240234</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2020-03-18</th>\n      <td>3754.840088</td>\n      <td>-0.385585</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotre portefeuille permet de mieux resister au stress test covid que le CAC 40.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: /Users/cherylkouadio/Documents/Repositories/personal-website/.venv/share/jupyter/kernels/python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.9.6\n---\n",
    "supporting": [
      "mesures_rsq_files/figure-ipynb"
    ],
    "filters": []
  }
}