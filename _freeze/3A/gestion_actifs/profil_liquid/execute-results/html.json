{
  "hash": "5d02c4f13c2f5f7c051e0f761b734f34",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Profil d'écoulement/ de liquidation de portefeuille\nauthor : Cheryl Kouadio\njupyter: python3\n---\n\n\n\nNous souhaitons calculer le profil d'écoulement/liquidation dans les scénarios suivants :\n\n1. Sous conditions normales avec déformation :\nOn part des volumes normaux des marchés, que l'on déforme pour obtenir les volumes liquidés. Dans ce cas, la liquidation commence par les actifs les plus faciles à liquider, pour finir avec les actifs les moins liquides. Cela entraîne une modification de la composition du portefeuille : les investisseurs qui sortent en premier disposent d’un portefeuille plus liquide, tandis que ceux qui restent se retrouvent désavantagés avec un portefeuille composé d'actifs moins liquides.\n\n2. Sous conditions normales sans déformation :\nL'objectif est de conserver le caractère liquide du portefeuille, afin de ne pas désavantager les investisseurs qui restent.\n\n3. Sous conditions stressées avec déformation :\nDans ce scénario, les marchés s’assèchent, ce qui entraîne une réduction significative des volumes liquidés. La déformation implique que les actifs les plus liquides sont liquidés en priorité, laissant un portefeuille encore plus illiquide pour ceux qui restent.\n\n4. Sous conditions stressées sans déformation :\nDans ce cas, bien que les marchés soient stressés, on cherche à maintenir un équilibre dans le portefeuille pour éviter de pénaliser les investisseurs restants.\n\n\n\nDans l'ordre des étapes, il s'agira dans ce TP de faire :\n\n1. Récupération des volumes quotidiens sur un historique de 3 mois.\n2. Calcul de l'ADV sur 3 mois (ADV 3M), c'est-à-dire la moyenne des volumes sur ces 3 mois.\n3. Génération des quantités associées à chaque actif :\n4. Pour obtenir un portefeuille ni trop liquide, ni trop illiquide, on prendra :\n$1.5 \\times randn() \\times \\text{ADV 3M}$, où randn()randn() génère une variable aléatoire selon une distribution normale.\n5. Calcul du profil de liquidation.\n\n::: {#da89ad15 .cell execution_count=1}\n``` {.python .cell-code}\n# ! pip install yfinance\nfrom datetime import datetime, timedelta\nimport yfinance as yf \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/cherylkouadio/Library/Python/3.9/lib/python/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the 'ssl' module is compiled with 'LibreSSL 2.8.3'. See: https://github.com/urllib3/urllib3/issues/3020\n  warnings.warn(\n```\n:::\n:::\n\n\n::: {#41bfd5c4 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_data(start_date, end_date, index_ticker, tickers, column=\"Close\"):\n    \"\"\"\n    Extraction de données de cours d'actions\n    Args:\n        start_date (str): Date de début au format 'YYYY-MM-DD'.\n        end_date (str): Date de fin au format 'YYYY-MM-DD'.\n\n    Returns:\n        dict: Contient les prix historiques des indices\n    \"\"\"\n    # Extraction des volumes historiques des composants\n    data = yf.download(tickers, start=start_date, end=end_date, auto_adjust =True)[column]\n\n    # Extraction des volumes historiques de l'indice CAC 40\n    index = yf.download(index_ticker, start=start_date, end=end_date, auto_adjust =True)[column]\n\n    return {\n        \"portfolio_data\": data,\n        \"benchmark_data\": index,\n    }\n\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=3*31)\n\nselected_assets = {\n    \"AC.PA\": \"Accor\",\n    \"AI.PA\": \"Air Liquide\",\n    \"AIR.PA\": \"Airbus\",\n    \"MT.AS\": \"ArcelorMittal\",\n    \"CS.PA\": \"AXA\",\n    \"BNP.PA\": \"BNP Paribas\",\n    \"EN.PA\": \"Bouygues\",\n    \"BVI.PA\": \"Bureau Veritas\",\n    \"CAP.PA\": \"Capgemini\",\n    \"CA.PA\": \"Carrefour\",\n    \"ACA.PA\": \"Crédit Agricole\",\n    \"BN.PA\": \"Danone\",\n    \"DSY.PA\": \"Dassault Systèmes\",\n    \"EDEN.PA\": \"Edenred\",\n    \"ENGI.PA\": \"Engie\",\n    \"EL.PA\": \"EssilorLuxottica\",\n    \"ERF.PA\": \"Eurofins Scientific\",\n    \"RMS.PA\": \"Hermès\",\n    \"KER.PA\": \"Kering\",\n    \"LR.PA\": \"Legrand\",\n    \"OR.PA\": \"L'Oréal\",\n    \"MC.PA\": \"LVMH\",\n    \"ML.PA\": \"Michelin\",\n    \"ORA.PA\": \"Orange\",\n    \"RI.PA\": \"Pernod Ricard\",\n    \"PUB.PA\": \"Publicis\",\n    \"RNO.PA\": \"Renault\",\n    \"SAF.PA\": \"Safran\",\n    \"SGO.PA\": \"Saint-Gobain\",\n    \"SAN.PA\": \"Sanofi\",\n    \"SU.PA\": \"Schneider Electric\",\n    \"GLE.PA\": \"Société Générale\",\n    \"STLA\": \"Stellantis\",\n    \"STMPA.PA\": \"STMicroelectronics\",\n    \"TEP.PA\": \"Teleperformance\",\n    \"HO.PA\": \"Thales\",\n    \"TTE.PA\": \"TotalEnergies\",\n    \"UNBLF\": \"Unibail-Rodamco-Westfield\",\n    \"VIE.PA\": \"Veolia\",\n    \"DG.PA\": \"Vinci\",\n}\n\nindex = \"^FCHI\"\n\nassets_ticker  = list(selected_assets.keys())\n\ndata = get_data(start_date,end_date, index, assets_ticker, column=\"Volume\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[                       0%                       ]\r[                       0%                       ]\r[****                   8%                       ]  3 of 40 completed\r[*****                 10%                       ]  4 of 40 completed\r[*****                 10%                       ]  4 of 40 completed\r[*******               15%                       ]  6 of 40 completed\r[*********             18%                       ]  7 of 40 completed\r[**********            20%                       ]  8 of 40 completed\r[***********           22%                       ]  9 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[***************       32%                       ]  13 of 40 completed\r[*****************     35%                       ]  14 of 40 completed\r[******************    38%                       ]  15 of 40 completed\r[*******************   40%                       ]  16 of 40 completed\r[********************  42%                       ]  17 of 40 completed\r[**********************45%                       ]  18 of 40 completed\r[**********************45%                       ]  18 of 40 completed\r[**********************50%                       ]  20 of 40 completed\r[**********************52%                       ]  21 of 40 completed\r[**********************55%*                      ]  22 of 40 completed\r[**********************57%**                     ]  23 of 40 completed\r[**********************60%****                   ]  24 of 40 completed\r[**********************62%*****                  ]  25 of 40 completed\r[**********************65%******                 ]  26 of 40 completed\r[**********************65%******                 ]  26 of 40 completed\r[**********************70%*********              ]  28 of 40 completed\r[**********************72%**********             ]  29 of 40 completed\r[**********************72%**********             ]  29 of 40 completed\r[**********************78%************           ]  31 of 40 completed\r[**********************78%************           ]  31 of 40 completed\r[**********************82%**************         ]  33 of 40 completed\r[**********************85%****************       ]  34 of 40 completed\r[**********************88%*****************      ]  35 of 40 completed\r[**********************90%******************     ]  36 of 40 completed\r[**********************92%*******************    ]  37 of 40 completed\r[**********************92%*******************    ]  37 of 40 completed\r[**********************98%********************** ]  39 of 40 completed\r[*********************100%***********************]  40 of 40 completed\n\r[*********************100%***********************]  1 of 1 completed\n```\n:::\n:::\n\n\n::: {#5c046328 .cell execution_count=3}\n``` {.python .cell-code}\nportfolio_data = data[\"portfolio_data\"]\nportfolio_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Ticker</th>\n      <th>AC.PA</th>\n      <th>ACA.PA</th>\n      <th>AI.PA</th>\n      <th>AIR.PA</th>\n      <th>BN.PA</th>\n      <th>BNP.PA</th>\n      <th>BVI.PA</th>\n      <th>CA.PA</th>\n      <th>CAP.PA</th>\n      <th>CS.PA</th>\n      <th>...</th>\n      <th>SAF.PA</th>\n      <th>SAN.PA</th>\n      <th>SGO.PA</th>\n      <th>STLA</th>\n      <th>STMPA.PA</th>\n      <th>SU.PA</th>\n      <th>TEP.PA</th>\n      <th>TTE.PA</th>\n      <th>UNBLF</th>\n      <th>VIE.PA</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2024-11-07</th>\n      <td>698430.0</td>\n      <td>13751044.0</td>\n      <td>813490.0</td>\n      <td>1091627.0</td>\n      <td>1059857.0</td>\n      <td>5322315.0</td>\n      <td>646260.0</td>\n      <td>2794758.0</td>\n      <td>326259.0</td>\n      <td>4163091.0</td>\n      <td>...</td>\n      <td>576180.0</td>\n      <td>1527095.0</td>\n      <td>1430888.0</td>\n      <td>6819700.0</td>\n      <td>2082219.0</td>\n      <td>892806.0</td>\n      <td>404002.0</td>\n      <td>3786884.0</td>\n      <td>0.0</td>\n      <td>2809097.0</td>\n    </tr>\n    <tr>\n      <th>2024-11-08</th>\n      <td>640605.0</td>\n      <td>4781311.0</td>\n      <td>712553.0</td>\n      <td>1541520.0</td>\n      <td>1045775.0</td>\n      <td>4731196.0</td>\n      <td>367776.0</td>\n      <td>4129105.0</td>\n      <td>340411.0</td>\n      <td>2828675.0</td>\n      <td>...</td>\n      <td>672105.0</td>\n      <td>1414195.0</td>\n      <td>1037715.0</td>\n      <td>8197900.0</td>\n      <td>1881978.0</td>\n      <td>737207.0</td>\n      <td>288437.0</td>\n      <td>3327420.0</td>\n      <td>100.0</td>\n      <td>2139007.0</td>\n    </tr>\n    <tr>\n      <th>2024-11-11</th>\n      <td>544390.0</td>\n      <td>3965216.0</td>\n      <td>615456.0</td>\n      <td>1013673.0</td>\n      <td>1139407.0</td>\n      <td>3062744.0</td>\n      <td>621229.0</td>\n      <td>2577272.0</td>\n      <td>332633.0</td>\n      <td>2860191.0</td>\n      <td>...</td>\n      <td>678397.0</td>\n      <td>1208511.0</td>\n      <td>877175.0</td>\n      <td>7181500.0</td>\n      <td>2067857.0</td>\n      <td>808043.0</td>\n      <td>268883.0</td>\n      <td>3669304.0</td>\n      <td>100.0</td>\n      <td>1474874.0</td>\n    </tr>\n    <tr>\n      <th>2024-11-12</th>\n      <td>476433.0</td>\n      <td>6774868.0</td>\n      <td>957769.0</td>\n      <td>1451643.0</td>\n      <td>1319645.0</td>\n      <td>3871602.0</td>\n      <td>503435.0</td>\n      <td>2216855.0</td>\n      <td>419941.0</td>\n      <td>4554097.0</td>\n      <td>...</td>\n      <td>928357.0</td>\n      <td>1941126.0</td>\n      <td>1059643.0</td>\n      <td>5832100.0</td>\n      <td>3211099.0</td>\n      <td>939216.0</td>\n      <td>376479.0</td>\n      <td>5104044.0</td>\n      <td>0.0</td>\n      <td>2051518.0</td>\n    </tr>\n    <tr>\n      <th>2024-11-13</th>\n      <td>503706.0</td>\n      <td>5911519.0</td>\n      <td>752386.0</td>\n      <td>1381466.0</td>\n      <td>1085131.0</td>\n      <td>2782805.0</td>\n      <td>674357.0</td>\n      <td>1985037.0</td>\n      <td>520292.0</td>\n      <td>3538137.0</td>\n      <td>...</td>\n      <td>665527.0</td>\n      <td>1394445.0</td>\n      <td>1431965.0</td>\n      <td>6821700.0</td>\n      <td>2456917.0</td>\n      <td>990623.0</td>\n      <td>206989.0</td>\n      <td>4171178.0</td>\n      <td>100.0</td>\n      <td>2188795.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 40 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#43d4de5d .cell execution_count=4}\n``` {.python .cell-code}\nportfolio_data.index\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nDatetimeIndex(['2024-11-07', '2024-11-08', '2024-11-11', '2024-11-12',\n               '2024-11-13', '2024-11-14', '2024-11-15', '2024-11-18',\n               '2024-11-19', '2024-11-20', '2024-11-21', '2024-11-22',\n               '2024-11-25', '2024-11-26', '2024-11-27', '2024-11-28',\n               '2024-11-29', '2024-12-02', '2024-12-03', '2024-12-04',\n               '2024-12-05', '2024-12-06', '2024-12-09', '2024-12-10',\n               '2024-12-11', '2024-12-12', '2024-12-13', '2024-12-16',\n               '2024-12-17', '2024-12-18', '2024-12-19', '2024-12-20',\n               '2024-12-23', '2024-12-24', '2024-12-26', '2024-12-27',\n               '2024-12-30', '2024-12-31', '2025-01-02', '2025-01-03',\n               '2025-01-06', '2025-01-07', '2025-01-08', '2025-01-09',\n               '2025-01-10', '2025-01-13', '2025-01-14', '2025-01-15',\n               '2025-01-16', '2025-01-17', '2025-01-20', '2025-01-21',\n               '2025-01-22', '2025-01-23', '2025-01-24', '2025-01-27',\n               '2025-01-28', '2025-01-29', '2025-01-30', '2025-01-31',\n               '2025-02-03', '2025-02-04', '2025-02-05', '2025-02-06',\n               '2025-02-07'],\n              dtype='datetime64[ns]', name='Date', freq=None)\n```\n:::\n:::\n\n\n::: {#d380108d .cell execution_count=5}\n``` {.python .cell-code}\n# Calcul des ADV 3Mois\n\nadv_3m = {portfolio_data[ticker].mean() for ticker in assets_ticker}\nadv_3m\n\nADV = pd.DataFrame(adv_3m, index = assets_ticker, columns = [\"ADV\"])\nADV.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ADV</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>2.166276e+06</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>6.087734e+05</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>3.842644e+05</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>2.288744e+05</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>5.688459e+05</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#46c30078 .cell execution_count=6}\n``` {.python .cell-code}\n# Génération des quantités\nnp.random.seed(123)\nADV[\"Quantity\"] =  round(1.5 * np.random.rand(len(ADV[\"ADV\"])) * ADV[\"ADV\"])\nADV.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ADV</th>\n      <th>Quantity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>2.166276e+06</td>\n      <td>2263116.0</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>6.087734e+05</td>\n      <td>261291.0</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>3.842644e+05</td>\n      <td>130756.0</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>2.288744e+05</td>\n      <td>189273.0</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>5.688459e+05</td>\n      <td>613900.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOn fait l'hypothèse que la profondeur de marché est de 20%. Celà signifie que l'on peut vendre 20% de la quantité sans impacter le prix de façon considérable. Au delà, le prix est impacté. Cette profondeur est ce qui est observé en pratique dans les carnets d'ordre à tel point que l'AMF le recommande.\n\n::: {#3e2bef1e .cell execution_count=7}\n``` {.python .cell-code}\nmarket_depth = 20/100\nADV[\"Quantity in 1day\"] = round(ADV[\"Quantity\"] * market_depth)\nADV.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ADV</th>\n      <th>Quantity</th>\n      <th>Quantity in 1day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>2.166276e+06</td>\n      <td>2263116.0</td>\n      <td>452623.0</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>6.087734e+05</td>\n      <td>261291.0</td>\n      <td>52258.0</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>3.842644e+05</td>\n      <td>130756.0</td>\n      <td>26151.0</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>2.288744e+05</td>\n      <td>189273.0</td>\n      <td>37855.0</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>5.688459e+05</td>\n      <td>613900.0</td>\n      <td>122780.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#dd57258f .cell execution_count=8}\n``` {.python .cell-code}\n# Calcul du nombre de jours de liquidation\nADV[\"Days of liquidation\"] = ADV[\"Quantity\"]/ADV[\"Quantity in 1day\"]\n\n# floor to 1 and round\nADV[\"Days of liquidation\"] = ADV[\"Days of liquidation\"].apply(lambda x: max(1, round(x)))\nADV.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ADV</th>\n      <th>Quantity</th>\n      <th>Quantity in 1day</th>\n      <th>Days of liquidation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>2.166276e+06</td>\n      <td>2263116.0</td>\n      <td>452623.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>6.087734e+05</td>\n      <td>261291.0</td>\n      <td>52258.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>3.842644e+05</td>\n      <td>130756.0</td>\n      <td>26151.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>2.288744e+05</td>\n      <td>189273.0</td>\n      <td>37855.0</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>5.688459e+05</td>\n      <td>613900.0</td>\n      <td>122780.0</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#f70d98f8 .cell execution_count=9}\n``` {.python .cell-code}\nprint(f\"Temps de liquidation du portefeuille : {ADV['Days of liquidation'].max()} jours\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTemps de liquidation du portefeuille : 5 jours\n```\n:::\n:::\n\n\n## Présence de déformation\n### Sous conditions normales avec déformation (waterfall liquidation)\n\nOn peut être également interessé par la quantité de liquidation sur plusieurs jours. Pour celà, on fait l'hypothèse qu'on liquide les prochains jours aux prix observés aujourd'hui.\nCe que je peux véritablement liquider en 1 jour est donc la quantité que je peux vendre sans impacter le prix, i.e. min(quantité liquidable en 1 jour, quantité restant dans le portefeuille).\n\nOn peut calculer la valeur du portefeuille initiale et sur les jours de liquidation désirée. On l'exprime généraleent en pourcentage des encours totaux. On peut également calculer le cumul du pourcentage liquidé sur les jours de liquidation désirée. Cela nous permet d'obtenir le profil d'écoulement.\n\n::: {#df7146fd .cell execution_count=10}\n``` {.python .cell-code}\n# Initialisation d'une colonne pour suivre les quantités liquidées\nADV[\"Quantity liquidated\"] = 0  # Initialement, rien n'est liquidé\n\n# Création d'une liste pour suivre la liquidation jour par jour\n# Au jour 0, on a liquidé 0. La colonne 0 sert de quantité initiale\nquantity_liquidated_per_day = [ADV[\"Quantity\"]]\n\nfor nb_day in range(1, 8):  # Pour chaque jour\n    # Calculer la quantité liquide au jour i\n    liquidated_today = np.minimum(ADV[\"Quantity in 1day\"], ADV[\"Quantity\"] - ADV[\"Quantity liquidated\"])\n    \n    # Mettre à jour les quantités liquidées dans le DataFrame\n    ADV[\"Quantity liquidated\"] += liquidated_today\n    \n    # Stocker les quantités liquidées ce jour dans une liste\n    quantity_liquidated_per_day.append(liquidated_today)\n\n# Conversion des résultats jour par jour en DataFrame pour plus de clarté\nliquidation_df = pd.DataFrame(quantity_liquidated_per_day).T\nliquidation_df.columns = [f\"{i}\" for i in range(len(quantity_liquidated_per_day))]\n\nliquidation_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>2263116.0</td>\n      <td>452623.0</td>\n      <td>452623.0</td>\n      <td>452623.0</td>\n      <td>452623.0</td>\n      <td>452623.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>261291.0</td>\n      <td>52258.0</td>\n      <td>52258.0</td>\n      <td>52258.0</td>\n      <td>52258.0</td>\n      <td>52258.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>130756.0</td>\n      <td>26151.0</td>\n      <td>26151.0</td>\n      <td>26151.0</td>\n      <td>26151.0</td>\n      <td>26151.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>189273.0</td>\n      <td>37855.0</td>\n      <td>37855.0</td>\n      <td>37855.0</td>\n      <td>37855.0</td>\n      <td>37853.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>613900.0</td>\n      <td>122780.0</td>\n      <td>122780.0</td>\n      <td>122780.0</td>\n      <td>122780.0</td>\n      <td>122780.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#203a824d .cell execution_count=11}\n``` {.python .cell-code}\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=1)\nprice_data = get_data(start_date, end_date, index, assets_ticker, column=\"Close\")\n\nprice_data[\"portfolio_data\"].head()\nprice_dict = price_data[\"portfolio_data\"].iloc[-1].to_dict()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[                       0%                       ]\r[**********            20%                       ]  8 of 40 completed\r[**********            20%                       ]  8 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[************          25%                       ]  10 of 40 completed\r[*******************   40%                       ]  16 of 40 completed\r[********************  42%                       ]  17 of 40 completed\r[**********************45%                       ]  18 of 40 completed\r[**********************48%                       ]  19 of 40 completed\r[**********************50%                       ]  20 of 40 completed\r[**********************50%                       ]  20 of 40 completed\r[**********************50%                       ]  20 of 40 completed\r[**********************50%                       ]  20 of 40 completed\r[**********************60%****                   ]  24 of 40 completed\r[**********************62%*****                  ]  25 of 40 completed\r[**********************65%******                 ]  26 of 40 completed\r[**********************65%******                 ]  26 of 40 completed\r[**********************70%*********              ]  28 of 40 completed\r[**********************72%**********             ]  29 of 40 completed\r[**********************75%***********            ]  30 of 40 completed\r[**********************78%************           ]  31 of 40 completed\r[**********************78%************           ]  31 of 40 completed\r[**********************82%**************         ]  33 of 40 completed\r[**********************85%****************       ]  34 of 40 completed\r[**********************88%*****************      ]  35 of 40 completed\r[**********************88%*****************      ]  35 of 40 completed\r[**********************92%*******************    ]  37 of 40 completed\r[**********************92%*******************    ]  37 of 40 completed\r[**********************98%********************** ]  39 of 40 completed\r[*********************100%***********************]  40 of 40 completed\n\r[*********************100%***********************]  1 of 1 completed\n```\n:::\n:::\n\n\n::: {#e0c5ed9d .cell execution_count=12}\n``` {.python .cell-code}\n# Valeur liquide des actions par jour de liquidation\nmarket_value =[\n    price_dict[ticker] * liquidation_df.loc[ticker]\n    for ticker in selected_assets\n]\n\nmarket_value = pd.DataFrame(market_value, index=selected_assets, columns=liquidation_df.columns)\nmarket_value.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>1.129295e+08</td>\n      <td>2.258589e+07</td>\n      <td>2.258589e+07</td>\n      <td>2.258589e+07</td>\n      <td>2.258589e+07</td>\n      <td>2.258589e+07</td>\n      <td>49.900002</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>4.418953e+07</td>\n      <td>8.837873e+06</td>\n      <td>8.837873e+06</td>\n      <td>8.837873e+06</td>\n      <td>8.837873e+06</td>\n      <td>8.837873e+06</td>\n      <td>169.119995</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>2.182579e+07</td>\n      <td>4.365125e+06</td>\n      <td>4.365125e+06</td>\n      <td>4.365125e+06</td>\n      <td>4.365125e+06</td>\n      <td>4.365125e+06</td>\n      <td>166.919998</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>5.178509e+06</td>\n      <td>1.035713e+06</td>\n      <td>1.035713e+06</td>\n      <td>1.035713e+06</td>\n      <td>1.035713e+06</td>\n      <td>1.035658e+06</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>2.305808e+07</td>\n      <td>4.611617e+06</td>\n      <td>4.611617e+06</td>\n      <td>4.611617e+06</td>\n      <td>4.611617e+06</td>\n      <td>4.611617e+06</td>\n      <td>0.000000</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9370f4f0 .cell execution_count=13}\n``` {.python .cell-code}\n# Calcul de la valeur de marché initiale et totale\nmarket_value_0 = market_value.iloc[:, 0]\ntotal_market_value_0 = market_value_0.sum()\n\n# Calcul de la valeur de marché cumulée (à partir de la colonne 1)\ncumsum_market_value = market_value.iloc[:, 1:].cumsum(axis=1)\ncumsum_total_market_value = market_value.iloc[:, 1:].sum(axis=0).cumsum()\ncumsum_market_value = pd.concat([pd.DataFrame(0, index=market_value.index, columns=[0]), cumsum_market_value], axis=1)\ncumsum_total_market_value = pd.concat([pd.Series(0, index=[0]), cumsum_total_market_value])\n\nweights = {}\nfor ticker in assets_ticker :\n    weights[ticker] = (market_value_0.loc[ticker] - cumsum_market_value.loc[ticker]) / (total_market_value_0 - cumsum_total_market_value)\n\nweights = pd.DataFrame(weights).T\nweights.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>0.010344</td>\n      <td>0.010344</td>\n      <td>0.010344</td>\n      <td>0.010344</td>\n      <td>0.010344</td>\n      <td>0.012815</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>0.004048</td>\n      <td>0.004048</td>\n      <td>0.004048</td>\n      <td>0.004048</td>\n      <td>0.004048</td>\n      <td>0.043432</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>0.001999</td>\n      <td>0.001999</td>\n      <td>0.001999</td>\n      <td>0.001999</td>\n      <td>0.001999</td>\n      <td>0.042867</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>0.000474</td>\n      <td>0.000474</td>\n      <td>0.000474</td>\n      <td>0.000474</td>\n      <td>0.000474</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>0.002112</td>\n      <td>0.002112</td>\n      <td>0.002112</td>\n      <td>0.002112</td>\n      <td>0.002112</td>\n      <td>0.000000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#9fc7c048 .cell execution_count=14}\n``` {.python .cell-code}\n# Initialiser le graphique\nplt.figure(figsize=(12, 6))\n\n# Barplot empilé\nbottom = None\nfor asset in weights.index:\n    plt.bar(\n        pd.to_numeric(weights.columns),  # Les jours\n        weights.loc[asset],  # Poids de l'actif pour chaque jour\n        bottom=bottom,  # Position de départ pour empiler les barres\n        label=selected_assets[asset]  # Légende pour chaque actif\n    )\n    bottom = weights.loc[asset] if bottom is None else bottom + weights.loc[asset]\n\nplt.xlabel(\"Days of Liquidation\")\nplt.ylabel(\"Portfolio Weights\")\nplt.title(\"Déformation du portefeuille\")\nplt.xticks(rotation=45)\nplt.legend(title=\"Assets\", bbox_to_anchor=(1.02, 1), loc=\"upper left\", fontsize=8, ncol=2)\nplt.tight_layout()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-15-output-1.png){width=1138 height=566}\n:::\n:::\n\n\nPour un fond de droit français reglementé, on a pas le droit d'investir plus de 5% du portefeuille dans une société.\nExceptionnellement, pour certains titre, on a le droit d'investir jusqu'à 10% du portefeuille, à condition que les titres qui sont exposées à plus de 5% du portefeuille ne dépassent pas 40% du portefeuille. C'est la règle des 5/10/40. C'est un ratio réglementaire pour les OPC. Toutes les pertes réalisées en raison du défaut de ce ratio doivent être supportées par la société de gestion. Ces depassements doivent être déclarés à l'AMF. Dans notre cas, ce ratio n'est pas respecté, l'équilibre du portefeuille est chamboulé.\n\n::: {#c776a47e .cell execution_count=15}\n``` {.python .cell-code}\n# Valeur liquide du portefeuille\nmarket_value_df = pd.DataFrame()\n\nmarket_value_df[\"market_value\"] = market_value.sum(axis=0)\n\n# Calculer la valeur liquide relative par rapport au jour 0\nmarket_value_df[\"relative value\"] = market_value_df[\"market_value\"] / market_value_df[\"market_value\"].iloc[0]\n\n# Calculer la valeur cumulée liquide relative du portefeuille\nmarket_value_df[\"cumulative value\"] = market_value_df[\"relative value\"].cumsum() - 1\n\n# Afficher le DataFrame résultant\nprint(market_value_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   market_value  relative value  cumulative value\n0  1.091699e+10    1.000000e+00               0.0\n1  2.183399e+09    2.000001e-01               0.2\n2  2.183399e+09    2.000001e-01               0.4\n3  2.183399e+09    2.000001e-01               0.6\n4  2.183399e+09    2.000001e-01               0.8\n5  2.183392e+09    1.999994e-01               1.0\n6  3.893920e+03    3.566844e-07               1.0\n7  0.000000e+00    0.000000e+00               1.0\n```\n:::\n:::\n\n\n::: {#c8d27dc4 .cell execution_count=16}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nmarket_value_df = market_value_df.iloc[1:]\n\nplt.figure(figsize=(12, 6))\nbars = plt.bar(market_value_df.index, market_value_df[\"cumulative value\"] * 100, color=\"skyblue\")\n\nfor bar in bars:\n    height = bar.get_height()\n    plt.text(\n        bar.get_x() + bar.get_width() / 2,  # Center text\n        height,  # Position slightly above the bar\n        f'{height:.2f}',  # Format with 2 decimal places\n        ha='center',  # Center horizontally\n        va='bottom',  # Position text at the bottom\n        fontsize=10, color=\"black\"\n    )\n\n# Set labels and title\nplt.xlabel(\"Days\")\nplt.ylabel(\"Cumulative Value (%)\")\nplt.title(\"Profil de liquidation du portefeuille\")\nplt.xticks(rotation=45)\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-17-output-1.png){width=965 height=526}\n:::\n:::\n\n\nPour voir ce qui arrive au profil d'écoulement lorsque les quantités varient, on va utiliser un facteur de modulation de la quantité. Cela permet de déterminer quelle est la taille cible du portefeuille qui permet d'avoir la liquidité pour un certain niveau en nombre de jours qu'on se fixe. Cet exercice est fait une seule fois à l'initialisation du portefeuille.\n\n**La liquidité d'un portefeuille dépend de la liquidité intrinsèque des titres et la quantité de titres.**\n\n::: {#3b1f93f7 .cell execution_count=17}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef liquidation_profile(ADV, price_dict, selected_assets, fact_modulation=0.30,nb_liquidation=8, plot_graphs=True):\n    \"\"\"\n    Calcule le profil de liquidation et visualise les graphiques des poids et des valeurs cumulées.\n    \n    Parameters:\n        ADV (pd.DataFrame): DataFrame contenant les informations sur les actifs (Quantity, Quantity in 1day, etc.).\n        price_dict (dict): Dictionnaire avec les prix des actifs (clé = actif, valeur = prix).\n        selected_assets (list): Liste des actifs sélectionnés.\n        fact_modulation (float): Facteur de modulation pour ajuster les quantités.\n        plot_graphs (bool): Indique si les graphiques doivent être affichés.\n    \n    Returns:\n        pd.DataFrame: DataFrame contenant les valeurs cumulées et relatives.\n    \"\"\"\n    # Initialisation des quantités liquidées\n    ADV = ADV.copy()\n    ADV[\"Quantity liquidated\"] = 0\n    quantity_liquidated_per_day = [ADV[\"Quantity\"] * fact_modulation]\n    \n    # Calcul des quantités liquidées par jour\n    for _ in range(1, nb_liquidation+1):\n        liquidated_today = np.minimum(\n            ADV[\"Quantity in 1day\"], \n            ADV[\"Quantity\"] * fact_modulation - ADV[\"Quantity liquidated\"]\n        )\n        ADV[\"Quantity liquidated\"] += liquidated_today\n        quantity_liquidated_per_day.append(liquidated_today)\n    \n    # Conversion des résultats en DataFrame\n    liquidation_df = pd.DataFrame(quantity_liquidated_per_day).T\n    liquidation_df.columns = [f\"{i}\" for i in range(len(quantity_liquidated_per_day))]\n    \n    # Calcul de la valeur liquide par actif et par jour\n    market_value = [\n        price_dict[ticker] * liquidation_df.loc[ticker]\n        for ticker in selected_assets\n    ]\n    market_value = pd.DataFrame(market_value, index=selected_assets, columns=liquidation_df.columns)\n    \n    # Calcul des poids par jour\n    # Calcul de la valeur de marché initiale et totale\n    market_value_0 = market_value.iloc[:, 0]\n    total_market_value_0 = market_value_0.sum()\n\n    # Calcul de la valeur de marché cumulée (à partir de la colonne 1)\n    cumsum_market_value = market_value.iloc[:, 1:].cumsum(axis=1)\n    cumsum_total_market_value = market_value.iloc[:, 1:].sum(axis=0).cumsum()\n    cumsum_market_value = pd.concat([pd.DataFrame(0, index=market_value.index, columns=[0]), cumsum_market_value], axis=1)\n    cumsum_total_market_value = pd.concat([pd.Series(0, index=[0]), cumsum_total_market_value])\n\n    weights = {}\n    for ticker in selected_assets :\n        weights[ticker] = (market_value_0.loc[ticker] - cumsum_market_value.loc[ticker]) / (total_market_value_0 - cumsum_total_market_value)\n\n    weights = pd.DataFrame(weights).T\n    \n    # Visualisation des poids (barplot empilé)\n    if plot_graphs:\n        # Initialiser le graphique\n        plt.figure(figsize=(12, 6))\n\n        # Barplot empilé\n        bottom = None\n        for asset in weights.index:\n            plt.bar(\n                pd.to_numeric(weights.columns),  # Les jours\n                weights.loc[asset],  # Poids de l'actif pour chaque jour\n                bottom=bottom,  # Position de départ pour empiler les barres\n                label=selected_assets[asset]  # Légende pour chaque actif\n            )\n            bottom = weights.loc[asset] if bottom is None else bottom + weights.loc[asset]\n\n        plt.xlabel(\"Days of Liquidation\")\n        plt.ylabel(\"Portfolio Weights\")\n        plt.title(\"Déformation du portefeuille\")\n        plt.xticks(rotation=45)\n        plt.legend(title=\"Assets\", bbox_to_anchor=(1.02, 1), loc=\"upper left\", fontsize=8, ncol=2)\n        plt.tight_layout()\n\n        plt.show()\n\n    \n    # Création du DataFrame des valeurs de marché\n    market_value_df = pd.DataFrame()\n    market_value_df[\"market_value\"] = market_value.sum(axis=0)\n    \n    # Calcul des valeurs relatives et cumulées\n    market_value_df[\"relative value\"] = market_value_df[\"market_value\"] / market_value_df[\"market_value\"].iloc[0]\n    market_value_df[\"cumulative value\"] = market_value_df[\"relative value\"].cumsum() - 1\n    market_value_df = market_value_df.iloc[1:]  # Retirer le jour 0 pour l'analyse cumulée\n    \n    # Visualisation de la valeur cumulative (barplot)\n    if plot_graphs:\n        plt.figure(figsize=(8, 4))\n        plt.bar(market_value_df.index, market_value_df[\"cumulative value\"] * 100, color=\"skyblue\")\n        plt.xlabel(\"Days\")\n        plt.ylabel(\"Cumulative Value (%)\")\n        plt.title(\"Profil de liquidation du portefeuille\")\n        plt.xticks(rotation=45)\n        plt.show()\n    return market_value_df, market_value, weights\n```\n:::\n\n\n::: {#0ea315a8 .cell execution_count=18}\n``` {.python .cell-code}\nfact_modulation=0.5\nnb_liquidation=6\n\nnew_market_value_df, new_market_value, new_weights = liquidation_profile(ADV, price_dict, selected_assets, fact_modulation, nb_liquidation, plot_graphs=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-19-output-1.png){width=1138 height=566}\n:::\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-19-output-2.png){width=667 height=378}\n:::\n:::\n\n\n::: {#0afe130d .cell execution_count=19}\n``` {.python .cell-code}\nnew_market_value.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>AC.PA</th>\n      <td>5.646475e+07</td>\n      <td>2.258589e+07</td>\n      <td>2.258589e+07</td>\n      <td>1.129297e+07</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AI.PA</th>\n      <td>2.209477e+07</td>\n      <td>8.837873e+06</td>\n      <td>8.837873e+06</td>\n      <td>4.419021e+06</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>AIR.PA</th>\n      <td>1.091290e+07</td>\n      <td>4.365125e+06</td>\n      <td>4.365125e+06</td>\n      <td>2.182646e+06</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>MT.AS</th>\n      <td>2.589255e+06</td>\n      <td>1.035713e+06</td>\n      <td>1.035713e+06</td>\n      <td>5.178291e+05</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>CS.PA</th>\n      <td>1.152904e+07</td>\n      <td>4.611617e+06</td>\n      <td>4.611617e+06</td>\n      <td>2.305808e+06</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Sous conditions stressées avec déformation\n\nPour avoir des conditions stressées, on joue sur la quantité liquidable en un jour et de fait sur la profondeur de marché.\nPour des conditions stressées à la baisse, on divise la profondeur de marché par 2. Pour des conditions stressées à la hausse, on multiplie la profondeur de marché par 2. \n\n::: {#37a557cc .cell execution_count=20}\n``` {.python .cell-code}\n# Calcul des ADV 3Mois\n\nadv_3m = {portfolio_data[ticker].mean() for ticker in assets_ticker}\n\nADV_stressed = pd.DataFrame(adv_3m, index = assets_ticker, columns = [\"ADV\"])\n\n# Génération des quantités\nnp.random.seed(42)\nADV_stressed[\"Quantity\"] =  round(1.5 * np.random.uniform(0, 1, size=len(ADV)) * ADV[\"ADV\"])\n\n# Quantité journalière\nmarket_depth = (20/100)/2  # On stresse la liquidité\nADV_stressed[\"Quantity in 1day\"] = round(ADV_stressed[\"Quantity\"] * market_depth)\n\n# Calcul du nombre de jours de liquidation\nADV_stressed[\"Days of liquidation\"] = ADV_stressed[\"Quantity\"]/ADV_stressed[\"Quantity in 1day\"]\n\n# floor to 1 and round\nADV_stressed[\"Days of liquidation\"] = ADV_stressed[\"Days of liquidation\"].apply(lambda x: max(1, round(x)))\n\nprint(f\"Temps de liquidation du portefeuille : {ADV_stressed['Days of liquidation'].max()} jours\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTemps de liquidation du portefeuille : 10 jours\n```\n:::\n:::\n\n\n::: {#a8ce14eb .cell execution_count=21}\n``` {.python .cell-code}\nfact_modulation=1\nnb_liquidation=12\n\nstressed_market_value_df, stressed_market_value, stressed_weights = liquidation_profile(ADV_stressed, price_dict, selected_assets, fact_modulation, nb_liquidation, plot_graphs=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-22-output-1.png){width=1138 height=566}\n:::\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-22-output-2.png){width=667 height=384}\n:::\n:::\n\n\n## Absence de déformation du portefeuille (pro forma)\n\nL'objectif est de conserver la distribution du portefeuille à mesure qu'il se liquide. Tout d'abord, on estime la quantité liquidable à un jour de chacun des titres comme fait précédemment. Celà permet d'avoir le pourcentage liquidable en un jour.\n\nSi on veut que le portefeuille se liquide à la même vitesse, il faut aller à la vitesse du titre le plus lent. On peut calculer le pourcentage liquidable en un jour pour chaque titre. On prendra le minimum de ces pourcentages pour déterminer le pourcentage liquidable en un jour du portefeuille.\n\nLe portefeuille prend ainsi plus de temps à se liquider et fatalement, le portefeuille finit par se déformer.\n\n::: {#17d35303 .cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef liquidation_profile_pro_forma(ADV, price_dict, selected_assets, fact_modulation=0.30,nb_liquidation=8, plot_graphs=True):\n    \"\"\"\n    Calcule le profil de liquidation et visualise les graphiques des poids et des valeurs cumulées.\n    \n    Parameters:\n        ADV (pd.DataFrame): DataFrame contenant les informations sur les actifs (Quantity, Quantity in 1day, etc.).\n        price_dict (dict): Dictionnaire avec les prix des actifs (clé = actif, valeur = prix).\n        selected_assets (list): Liste des actifs sélectionnés.\n        fact_modulation (float): Facteur de modulation pour ajuster les quantités.\n        plot_graphs (bool): Indique si les graphiques doivent être affichés.\n    \n    Returns:\n        pd.DataFrame: DataFrame contenant les valeurs cumulées et relatives.\n    \"\"\"\n    # Initialisation des quantités liquidées\n    ADV = ADV.copy()\n    ADV[\"Quantity liquidated\"] = 0\n    quantity_liquidated_per_day = [ADV[\"Quantity\"] * fact_modulation]\n    \n    # Calcul des quantités liquidées par jour\n    for _ in range(1, nb_liquidation+1):        \n        liquidated_today = np.minimum(\n            ADV[\"Quantity in 1day\"], \n            ADV[\"Quantity\"] * fact_modulation - ADV[\"Quantity liquidated\"]\n        )\n        min_liquidated_today = (liquidated_today/ADV[\"Quantity in 1day\"]).min() # On liquide à la vitesse de l'actif le moins liquide\n        ADV[\"Quantity liquidated\"] += min_liquidated_today*liquidated_today\n        quantity_liquidated_per_day.append(liquidated_today)\n    \n    # Conversion des résultats en DataFrame\n    liquidation_df = pd.DataFrame(quantity_liquidated_per_day).T\n    liquidation_df.columns = [f\"{i}\" for i in range(len(quantity_liquidated_per_day))]\n    \n    # Calcul de la valeur liquide par actif et par jour\n    market_value = [\n        price_dict[ticker] * liquidation_df.loc[ticker]\n        for ticker in selected_assets\n    ]\n    market_value = pd.DataFrame(market_value, index=selected_assets, columns=liquidation_df.columns)\n    \n    # Calcul des poids par jour\n    # Calcul de la valeur de marché initiale et totale\n    market_value_0 = market_value.iloc[:, 0]\n    total_market_value_0 = market_value_0.sum()\n\n    # Calcul de la valeur de marché cumulée (à partir de la colonne 1)\n    cumsum_market_value = market_value.iloc[:, 1:].cumsum(axis=1)\n    cumsum_total_market_value = market_value.iloc[:, 1:].sum(axis=0).cumsum()\n    cumsum_market_value = pd.concat([pd.DataFrame(0, index=market_value.index, columns=[0]), cumsum_market_value], axis=1)\n    cumsum_total_market_value = pd.concat([pd.Series(0, index=[0]), cumsum_total_market_value])\n\n    weights = {}\n    for ticker in selected_assets :\n        weights[ticker] = (market_value_0.loc[ticker] - cumsum_market_value.loc[ticker]) / (total_market_value_0 - cumsum_total_market_value)\n\n    weights = pd.DataFrame(weights).T\n    \n    # Visualisation des poids (barplot empilé)\n    if plot_graphs:\n        # Initialiser le graphique\n        plt.figure(figsize=(12, 6))\n\n        # Barplot empilé\n        bottom = None\n        for asset in weights.index:\n            plt.bar(\n                pd.to_numeric(weights.columns),  # Les jours\n                weights.loc[asset],  # Poids de l'actif pour chaque jour\n                bottom=bottom,  # Position de départ pour empiler les barres\n                label=selected_assets[asset]  # Légende pour chaque actif\n            )\n            bottom = weights.loc[asset] if bottom is None else bottom + weights.loc[asset]\n\n        plt.xlabel(\"Days of Liquidation\")\n        plt.ylabel(\"Portfolio Weights\")\n        plt.title(\"Déformation du portefeuille\")\n        plt.xticks(rotation=45)\n        plt.legend(title=\"Assets\", bbox_to_anchor=(1.02, 1), loc=\"upper left\", fontsize=8, ncol=2)\n        plt.tight_layout()\n\n        plt.show()\n\n    \n    # Création du DataFrame des valeurs de marché\n    market_value_df = pd.DataFrame()\n    market_value_df[\"market_value\"] = market_value.sum(axis=0)\n    \n    # Calcul des valeurs relatives et cumulées\n    market_value_df[\"relative value\"] = market_value_df[\"market_value\"] / market_value_df[\"market_value\"].iloc[0]\n    market_value_df[\"cumulative value\"] = market_value_df[\"relative value\"].cumsum() - 1\n    market_value_df = market_value_df.iloc[1:]  # Retirer le jour 0 pour l'analyse cumulée\n    \n    # Visualisation de la valeur cumulative (barplot)\n    if plot_graphs:\n        plt.figure(figsize=(8, 4))\n        plt.bar(market_value_df.index, market_value_df[\"cumulative value\"] * 100, color=\"skyblue\")\n        plt.xlabel(\"Days\")\n        plt.ylabel(\"Cumulative Value (%)\")\n        plt.title(\"Profil de liquidation du portefeuille\")\n        plt.xticks(rotation=45)\n        plt.show()\n    return market_value_df, market_value, weights\n```\n:::\n\n\n::: {#d188af12 .cell execution_count=23}\n``` {.python .cell-code}\nfact_modulation=1\nnb_liquidation=10\n\nstressed_market_value_df, stressed_market_value, stressed_weights = liquidation_profile_pro_forma(ADV_stressed, price_dict, selected_assets, fact_modulation, nb_liquidation, plot_graphs=True)\n```\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-24-output-1.png){width=1138 height=566}\n:::\n\n::: {.cell-output .cell-output-display}\n![](profil_liquid_files/figure-html/cell-24-output-2.png){width=667 height=384}\n:::\n:::\n\n\nPour gérer la liquidité d'un portefeuille et donc préserver la qualité du portefeuille, on peut suspendre les souscriptions et les rachats par des mécanismes émis par la loi. Les régulateurs des SGP annoncent que les investisseurs annoncent que les indivdus ne peuvent plus souscrire ou faire un rachat.\n\n**Mécanismes de gestion de la liquidité**:\n\n1. **Les Gates** consistent à plafonner les rachats. Si les rachats totaux sont supérieures à 5% de l'actif net, la SGP a *le droit et non l'obligatoire* ne pas honorer les rachats de plus de 5%. Elle limite donc les rachats en un jour à 5% et ventiler le reste sur les jours suivants en fonction des conditions du marché. Cela permet de ne pas impacter le prix de façon considérable. C'est une mesure de protection des investisseurs restants. Les gates restent quand même un signal négatif pour les investisseurs restants. Ils permettent toutefois de mettre de l'ordre dans le portefeuille. L'AMF le fait figurer dans le prospectus, sauf si la SGP arrive à justifier qu'elle n'a pas besoin de le faire. *Il n'en demeure pas moins que l'activation des gates est optionnelle*\n\n",
    "supporting": [
      "profil_liquid_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}